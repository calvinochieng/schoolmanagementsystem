{% extends 'base.html' %}

{% block title %}Students - School Management Portal{% endblock %}

{% block breadcrumb_items %}
    <li><a href="{% url 'dashboard' %}">Dashboard</a></li>
    <li class="is-active"><a href="{% url 'student_list' %}" aria-current="page">Students</a></li>
{% endblock %}

{% block page_icon %}<span class="icon is-medium mr-2"><i class="fas fa-user-graduate"></i></span>{% endblock %}
{% block page_title %}Students{% endblock %}
{% block page_subtitle %}Manage all student records{% endblock %}

{% block content %}
<div class="columns">
    <div class="column is-12">
        <div class="card">
            <header class="card-header">
                <p class="card-header-title">
                    <span class="icon mr-2"><i class="fas fa-list"></i></span>
                    Student Directory
                    {% if search_query %}
                    <span class="ml-2 tag is-info">
                        Search: "{{ search_query }}"
                    </span>
                    {% endif %}
                </p>
                <div class="card-header-icon">
                    <a href="#" class="button is-small is-primary">
                        <span class="icon is-small">
                            <i class="fas fa-plus"></i>
                        </span>
                        <span>New Student</span>
                    </a>
                </div>
            </header>
            <div class="card-content">
                <!-- Search and Filter Controls -->
                <form method="GET" action="{% url 'student_list' %}">
                    <div class="field has-addons mb-5">
                        <div class="control is-expanded">
                            <input class="input" type="text" name="search" placeholder="Search students by name or enrollment number..." value="{{ search_query }}">
                        </div>
                        <div class="control">
                            <button type="submit" class="button is-info">
                                <span class="icon is-small">
                                    <i class="fas fa-search"></i>
                                </span>
                                <span>Search</span>
                            </button>
                        </div>
                        {% if search_query %}
                        <div class="control">
                            <a href="{% url 'student_list' %}" class="button is-light">
                                <span class="icon is-small">
                                    <i class="fas fa-times"></i>
                                </span>
                                <span>Clear</span>
                            </a>
                        </div>
                        {% endif %}
                    </div>
                </form>
                
                <!-- Search results summary if searching -->
                {% if search_query %}
                <div class="notification is-light is-info mb-5">
                    <p>
                        <span class="icon"><i class="fas fa-info-circle"></i></span>
                        Found <strong>{{ total_count }}</strong> students matching your search for "<strong>{{ search_query }}</strong>"
                    </p>
                </div>
                {% endif %}
                
                <!-- Students Table -->
                <div class="table-container">
                    <table class="table is-fullwidth is-hoverable is-striped">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Enrollment #</th>
                                <th>Grade</th>
                                <th>Gender</th>
                                <th>Enrollment Date</th>
                                <th>Added By</th>
                                <th class="has-text-centered">Reports</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for student in page_obj %}
                            <tr>
                                <td>
                                    <a href="{% url 'student_detail_view' student.id %}" class="has-text-weight-medium">
                                        {{ student.name }}
                                    </a>
                                </td>
                                <td>{{ student.enrollment_number }}</td>
                                <td>{{ student.grade }}</td>
                                <td>{{ student.gender }}</td>
                                <td>{{ student.enrollment_date|date:"M d, Y" }}</td>
                                <td>
                                    {% if student.enrolled_by %}
                                        {{ student.enrolled_by.get_full_name|default:student.enrolled_by.username }}
                                    {% else %}
                                        <span class="has-text-grey-light">â€”</span>
                                    {% endif %}
                                </td>
                                <td class="has-text-centered">
                                    {% with report_count=student.discipline_reports.count %}
                                    {% if report_count > 0 %}
                                        <a href="{% url 'discipline_report_list' %}?student={{ student.id }}" class="tag {% if report_count > 5 %}is-danger{% elif report_count > 2 %}is-warning{% else %}is-info{% endif %}">
                                            {{ report_count }}
                                        </a>
                                    {% else %}
                                        <span class="tag is-light">0</span>
                                    {% endif %}
                                    {% endwith %}
                                </td>
                                <td class="has-text-right">
                                    <div class="buttons is-right are-small">
                                        <a href="{% url 'student_detail_view' student.id %}" class="button is-small is-primary is-outlined">
                                            <span class="icon is-small">
                                                <i class="fas fa-eye"></i>
                                            </span>
                                            <span>View</span>
                                        </a>
                                        <a href="{% url 'create_discipline_report' %}?student={{ student.id }}" class="button is-small is-info is-outlined">
                                            <span class="icon is-small">
                                                <i class="fas fa-clipboard-list"></i>
                                            </span>
                                            <span>Report</span>
                                        </a>
                                    </div>
                                </td>
                            </tr>
                            {% empty %}
                            <tr>
                                <td colspan="8" class="has-text-centered py-5">
                                    {% if search_query %}
                                    <p class="has-text-grey mb-4">No students found matching "{{ search_query }}"</p>
                                    <a href="{% url 'student_list' %}" class="button is-small is-info">
                                        <span class="icon is-small">
                                            <i class="fas fa-arrow-left"></i>
                                        </span>
                                        <span>Back to All Students</span>
                                    </a>
                                    {% else %}
                                    <p class="has-text-grey mb-4">No students found</p>
                                    <a href="#" class="button is-small is-primary">
                                        <span class="icon is-small">
                                            <i class="fas fa-plus"></i>
                                        </span>
                                        <span>Add First Student</span>
                                    </a>
                                    {% endif %}
                                </td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
                
                <!-- Pagination with search query preserved -->
                {% if page_obj.has_other_pages %}
                <nav class="pagination is-centered mt-5" role="navigation" aria-label="pagination">
                    {% if page_obj.has_previous %}
                    <a href="?page={{ page_obj.previous_page_number }}{% if search_query %}&search={{ search_query }}{% endif %}" class="pagination-previous">
                        <span class="icon is-small">
                            <i class="fas fa-chevron-left"></i>
                        </span>
                        <span>Previous</span>
                    </a>
                    {% else %}
                    <a class="pagination-previous" disabled>
                        <span class="icon is-small">
                            <i class="fas fa-chevron-left"></i>
                        </span>
                        <span>Previous</span>
                    </a>
                    {% endif %}
                    
                    {% if page_obj.has_next %}
                    <a href="?page={{ page_obj.next_page_number }}{% if search_query %}&search={{ search_query }}{% endif %}" class="pagination-next">
                        <span>Next</span>
                        <span class="icon is-small">
                            <i class="fas fa-chevron-right"></i>
                        </span>
                    </a>
                    {% else %}
                    <a class="pagination-next" disabled>
                        <span>Next</span>
                        <span class="icon is-small">
                            <i class="fas fa-chevron-right"></i>
                        </span>
                    </a>
                    {% endif %}
                    
                    <ul class="pagination-list">
                        {% if page_obj.number > 3 %}
                        <li><a href="?page=1{% if search_query %}&search={{ search_query }}{% endif %}" class="pagination-link">1</a></li>
                        <li><span class="pagination-ellipsis">&hellip;</span></li>
                        {% endif %}
                        
                        {% for i in page_obj.paginator.page_range %}
                            {% if i > page_obj.number|add:'-3' and i < page_obj.number|add:'3' %}
                            <li>
                                <a href="?page={{ i }}{% if search_query %}&search={{ search_query }}{% endif %}" class="pagination-link {% if i == page_obj.number %}is-current{% endif %}">
                                    {{ i }}
                                </a>
                            </li>
                            {% endif %}
                        {% endfor %}
                        
                        {% if page_obj.number < page_obj.paginator.num_pages|add:'-2' %}
                        <li><span class="pagination-ellipsis">&hellip;</span></li>
                        <li>
                            <a href="?page={{ page_obj.paginator.num_pages }}{% if search_query %}&search={{ search_query }}{% endif %}" class="pagination-link">
                                {{ page_obj.paginator.num_pages }}
                            </a>
                        </li>
                        {% endif %}
                    </ul>
                </nav>
                {% endif %}
            </div>
            <footer class="card-footer">
                <a href="#" class="card-footer-item has-text-primary">
                    <span class="icon"><i class="fas fa-download"></i></span>
                    <span>Export Students</span>
                </a>
                <a href="#" class="card-footer-item has-text-info">
                    <span class="icon"><i class="fas fa-upload"></i></span>
                    <span>Import Students</span>
                </a>
            </footer>
        </div>
    </div>
</div>

<!-- Student Statistics section remains unchanged -->
<div class="columns is-multiline mt-5">
    <!-- Statistics content from previous template -->
    <!-- ... -->
</div>

<!-- CSS styles remain unchanged -->
<style>
    /* Styles from previous template */
    /* ... */
</style>
{% endblock %}





from django.db import models
from django.conf import settings
from django.utils import timezone
import random

class Student(models.Model):
    # Choices for Grades based on CBC (Junior, Senior School)
    GRADE_CHOICES = [
        ('G7', 'Grade 7 (Form 1)'),
        ('G8', 'Grade 8 (Form 2)'),
        ('G9', 'Grade 9 (Form 3)'),
        # Senior School
        ('G10', 'Grade 10 (Form 4)'),
        ('G11', 'Grade 11'),
        ('G12', 'Grade 12'),
    ]

    # Choices for Gender
    GENDER_CHOICES = [
        ('M', 'Male'),
        ('F', 'Female'),
        ('O', 'Other'), # Optional: Consider adding 'Other' or 'Prefer not to say'
    ]
    full_name = models.CharField(max_length=255)
    grade = models.CharField(
        max_length=20,
        choices=GRADE_CHOICES,
        help_text="Select the student's current grade level (CBC System)."
    )
    gender = models.CharField(
        max_length=10,
        choices=GENDER_CHOICES
    )
    enrollment_number = models.CharField(max_length=20, unique=True, null=True, blank=True)
    enrollment_date = models.DateField(default=timezone.now) # Added default for convenience
    enrolled_by = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.SET_NULL,
        null=True,
        blank=True, # Allow blank for cases where enrollment isn't tied to a specific staff user initially
        related_name='enrolled_students',
        limit_choices_to={'is_staff': True},
         help_text="Staff member who enrolled the student."
    )
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        # Use get_grade_display() to show the human-readable choice name
        return f"{self.name} ({self.get_grade_display()})"

    def save(self, *args, **kwargs):
        # Generate enrollment number if it doesn't exist
        if not self.enrollment_number:
            year = timezone.now().year
            while True:
                random_number = str(random.randint(1, 99999)).zfill(5)
                potential_enrollment_number = f"{year}-{random_number}"
                if not Student.objects.filter(enrollment_number=potential_enrollment_number).exists():
                    self.enrollment_number = potential_enrollment_number
                    break
        super().save(*args, **kwargs)

    class Meta:
        ordering = ['name', 'grade'] 



        from django.shortcuts import render, get_object_or_404, redirect
        from django.contrib.auth.decorators import login_required
        from django.http import HttpResponseForbidden
        from django.contrib import messages
        from django.utils import timezone
        from django.urls import reverse
        from django.core.exceptions import PermissionDenied
        
        from .models import DisciplineReport, Student
        from .forms import StatusUpdateForm  # You'll need to create this form
        
        
        @login_required
        def discipline_report_detail_view(request, pk):
            """
            Detailed view of a specific discipline report.
            Shows report information, student details, and provides actions based on user permissions.
            
            Staff users can see all reports and update their status.
            Parent users can only see reports related to their children.
            """
            # Get the report or return 404
            report = get_object_or_404(DisciplineReport.objects.select_related(
                'student', 'added_by'
            ).prefetch_related(
                'student__parent_profiles',
                'student__parent_profiles__user'
            ), pk=pk, is_deleted=False)
            
            # Check permissions
            user = request.user
            has_access = False
            
            if user.is_staff:
                has_access = True
            elif hasattr(user, 'parent_profile'):
                # Check if this report is for the parent's student
                has_access = user.parent_profile.student == report.student
            
            if not has_access:
                raise PermissionDenied("You don't have permission to view this report.")
            
            # Handle status update form submission (staff only)
            if request.method == 'POST' and user.is_staff and 'status' in request.POST:
                previous_status = report.status
                form = StatusUpdateForm(request.POST, instance=report)
                
                if form.is_valid():
                    # Save the updated report
                    updated_report = form.save(commit=False)
                    updated_report.updated_at = timezone.now()
                    updated_report.save()
                    
                    # Add status change comment if provided
                    status_comment = request.POST.get('status_comment', '').strip()
                    if status_comment:
                        # This assumes you have a StatusUpdate model or similar
                        # If not, you could append to the report's comment field instead
                        from .models import StatusUpdate  # Import here to avoid circular imports
                        StatusUpdate.objects.create(
                            report=report,
                            previous_status=previous_status,
                            new_status=updated_report.status,
                            comment=status_comment,
                            updated_by=user
                        )
                    
                    messages.success(request, f"Report status updated to {report.get_status_display()}")
                    return redirect('discipline_report_detail', pk=pk)
                else:
                    messages.error(request, "Error updating status. Please check the form.")
            else:
                form = StatusUpdateForm(instance=report)
            
            # Check if the user can edit/delete this report
            can_edit = user.is_staff
            can_delete = user.is_superuser or user == report.added_by
            
            context = {
                'report': report,
                'status_choices': DisciplineReport.STATUS_CHOICES,
                'severity_choices': DisciplineReport.SEVERITY_CHOICES,
                'can_edit': can_edit,
                'can_delete': can_delete,
                'form': form,
                # Include any status updates history if you've implemented that
                'status_updates': report.status_updates.order_by('-created_at') if hasattr(report, 'status_updates') else None,
            }
            
            return render(request, 'discipline/discipline_report_detail.html', context)
        
        
        @login_required
        def discipline_report_update_status(request, pk):
            """
            Handle status updates independently from the main detail view.
            This allows for a cleaner separation of concerns and easier testing.
            """
            if not request.user.is_staff:
                return HttpResponseForbidden("Only staff members can update report status.")
            
            if request.method != 'POST':
                return redirect('discipline_report_detail', pk=pk)
            
            report = get_object_or_404(DisciplineReport, pk=pk, is_deleted=False)
            previous_status = report.status
            
            # Update the status
            new_status = request.POST.get('status')
            if new_status and new_status in dict(DisciplineReport.STATUS_CHOICES):
                report.status = new_status
                report.updated_at = timezone.now()
                report.save()
                
                # Handle status comment if provided
                status_comment = request.POST.get('status_comment', '').strip()
                if status_comment:
                    # If you have a StatusUpdate model:
                    try:
                        from .models import StatusUpdate
                        StatusUpdate.objects.create(
                            report=report,
                            previous_status=previous_status,
                            new_status=new_status,
                            comment=status_comment,
                            updated_by=request.user
                        )
                    except ImportError:
                        # Otherwise append to report comment
                        if report.comment:
                            report.comment += f"\n\n[Status Update by {request.user.get_full_name() or request.user.username} on {timezone.now().strftime('%Y-%m-%d %H:%M')}]\n"
                        else:
                            report.comment = f"[Status Update by {request.user.get_full_name() or request.user.username} on {timezone.now().strftime('%Y-%m-%d %H:%M')}]\n"
                        
                        report.comment += f"Status changed from {dict(DisciplineReport.STATUS_CHOICES)[previous_status]} to {dict(DisciplineReport.STATUS_CHOICES)[new_status]}.\n"
                        report.comment += f"Comment: {status_comment}"
                        report.save()
                
                messages.success(request, f"Report status updated to {report.get_status_display()}")
            else:
                messages.error(request, "Invalid status value provided.")
            
            return redirect('discipline_report_detail', pk=pk)
        
        
        @login_required
        def discipline_report_delete(request, pk):
            """
            Soft delete a discipline report (mark as deleted).
            Only superusers or the report creator can delete.
            """
            report = get_object_or_404(DisciplineReport, pk=pk, is_deleted=False)
            
            # Check permissions
            if not (request.user.is_superuser or request.user == report.added_by):
                return HttpResponseForbidden("You don't have permission to delete this report.")
            
            if request.method == 'POST':
                # Soft delete
                report.is_deleted = True
                report.save()
                messages.success(request, "Discipline report has been deleted.")
                return redirect('discipline_report_list')
            
            # If not POST, redirect back to detail view
            return redirect('discipline_report_detail', pk=pk)
        
        
        @login_required
        def discipline_report_edit(request, pk):
            """
            Edit an existing discipline report.
            Only staff members can edit reports.
            """
            # This is a placeholder function - you would need to implement the full form handling
            # Including the form class and template
            if not request.user.is_staff:
                return HttpResponseForbidden("Only staff members can edit reports.")
            
            report = get_object_or_404(DisciplineReport, pk=pk, is_deleted=False)
            
            # Redirect to the actual edit view or render edit form
            # For now we'll just redirect back to the detail page
            messages.info(request, "Edit functionality to be implemented.")
            return redirect('discipline_report_detail', pk=pk)
        
        
        # Here's a definition for the StatusUpdateForm class that can be used above
        from django import forms
        
        class StatusUpdateForm(forms.ModelForm):
            """Form for updating the status of a discipline report."""
            
            class Meta:
                model = DisciplineReport
                fields = ['status']
                widgets = {
                    'status': forms.Select(attrs={'class': 'select is-fullwidth'})
                }



                from django import forms
                # Import your models here (adjust the path if necessary)
                # from .models import ParentProfile, Student
                # Assuming you have models like these:
                # class Student(models.Model):
                #     # ... student fields ...
                #     def __str__(self):
                #         return f"Student {self.id}" # Or name, etc.
                
                # class ParentProfile(models.Model):
                #     PARENT_ROLE_GUARDIAN = 'guardian'
                #     PARENT_ROLE_MOTHER = 'mother'
                #     PARENT_ROLE_FATHER = 'father'
                #     # ... other roles ...
                #     PARENT_ROLE_CHOICES = [
                #         (PARENT_ROLE_GUARDIAN, 'Guardian'),
                #         (PARENT_ROLE_MOTHER, 'Mother'),
                #         (PARENT_ROLE_FATHER, 'Father'),
                #         # ... other choices ...
                #     ]
                #
                #     student = models.ForeignKey(Student, on_delete=models.CASCADE) # Or ManyToManyField? Check your model.
                #     full_name = models.CharField(max_length=255)
                #     parent_role = models.CharField(max_length=50, choices=PARENT_ROLE_CHOICES)
                #     phone = models.CharField(max_length=15, unique=True) # IMPORTANT: unique=True assumed
                #     email = models.EmailField(blank=True, null=True, unique=True) # IMPORTANT: unique=True assumed, blank/null for optional
                
                class ParentProfileForm(forms.ModelForm):
                    # You can still explicitly define fields here if you need more control
                    # than the ModelForm provides automatically (e.g., different queryset, widget attributes)
                    # If you explicitly define a field here, ensure it's also listed in Meta.fields.
                
                    # Example: Explicitly defining email to ensure widget/label/required status
                    # is exactly as you had it, though ModelForm usually infers this well.
                    email = forms.EmailField(
                        required=False, # Corresponds to blank=True on the model field
                        label="Email Address (Optional)",
                        widget=forms.EmailInput(attrs={'class': 'form-control input'})
                    )
                
                    class Meta:
                        model = ParentProfile  # Specify the model the form is based on
                        # List the fields from the model to include in the form
                        fields = ['student', 'full_name', 'parent_role', 'phone', 'email']
                
                        # Define labels for fields (optional, defaults to model field's verbose_name)
                        labels = {
                            'student': "Select Student",
                            'full_name': "Full Name",
                            'parent_role': "Parent Role",
                            'phone': "Phone Number",
                            # 'email' label is handled by the explicit field definition above
                        }
                
                        # Define widgets for fields (optional, defaults to Django's default widgets)
                        widgets = {
                            'student': forms.Select(attrs={'class': 'form-control'}),
                            'full_name': forms.TextInput(attrs={'class': 'form-control input'}),
                            'parent_role': forms.Select(attrs={'class': 'form-control'}), # Choices come from the model field
                            'phone': forms.TextInput(attrs={'class': 'form-control input'}),
                            # 'email' widget is handled by the explicit field definition above
                        }
                
                    # clean_phone and clean_email methods are NO LONGER NEEDED *if*
                    # 'phone' and 'email' fields have `unique=True` on the ParentProfile model.
                    # The ModelForm's default validation handles uniqueness checks correctly
                    # for both create and update operations (`self.instance`).
                
                    # **IMPORTANT**: If unique=True is NOT set on your model fields,
                    # you MUST keep the original clean_phone and clean_email methods here:
                    #
                    # def clean_phone(self):
                    #     phone = self.cleaned_data['phone']
                    #     # Check if this is an update (instance exists)
                    #     if self.instance and self.instance.pk:
                    #         # Exclude the current instance from the uniqueness check
                    #         existing = ParentProfile.objects.filter(phone=phone).exclude(pk=self.instance.pk).exists()
                    #         if existing:
                    #             raise forms.ValidationError("This phone number is already registered with another parent.")
                    #     else:
                    #         # This is a new instance, so check all records
                    #         if ParentProfile.objects.filter(phone=phone).exists():
                    #             raise forms.ValidationError("This phone number is already registered with another parent.")
                    #     return phone
                    #
                    # def clean_email(self):
                    #     email = self.cleaned_data.get('email')
                    #     if not email:  # Skip validation if email is empty (since it's optional)
                    #         return email
                    #
                    #     # Check if this is an update (instance exists)
                    #     if self.instance and self.instance.pk:
                    #         # Exclude the current instance from the uniqueness check
                    #         existing = ParentProfile.objects.filter(email=email).exclude(pk=self.instance.pk).exists()
                    #         if existing:
                    #             raise forms.ValidationError("This email is already registered with another parent.")
                    #     else:
                    #         # This is a new instance, so check all records
                    #         if ParentProfile.objects.filter(email=email).exists():
                    #             raise forms.ValidationError("This email is already registered with another parent.")
                    #     return email



////// Parent edit dumpt //////
from django import forms
from django.db.models import Q
from .models import ParentProfile, Student

class ParentProfileForm(forms.ModelForm):
    class Meta:
        model = ParentProfile
        fields = ['student', 'full_name', 'parent_role', 'phone', 'email']

    student = forms.ModelChoiceField(
        queryset=Student.objects.none(),   # weâ€™ll override this in __init__
        label="Select Student",
        widget=forms.Select(attrs={'class': 'form-control'})
    )
    # â€¦ your other fields here â€¦

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        # base queryset: only students with no parent profiles
        qs = Student.objects.filter(parent_profiles__isnull=True)

        # if weâ€™re editing, include that student even though they have a profile
        if self.instance and self.instance.pk:
            qs = qs | Student.objects.filter(pk=self.instance.student_id)

        self.fields['student'].queryset = qs.distinct()



//// Parent portal dumpt //////
from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from .models import ParentProfile, Student, DisciplineReport

@login_required
def parent_portal_detail(request):
    """
    View for parent portal showing student details and discipline reports.
    Only accessible by users with a parent profile.
    """
    # Check if user has a parent profile
    try:
        parent_profile = request.user.parent_profile
    except ParentProfile.DoesNotExist:
        messages.error(request, "You don't have access to the parent portal.")
        return redirect('dashboard')
    
    # Get the student associated with this parent
    student = parent_profile.student
    
    # Get all discipline reports for this student, ordered by date (newest first)
    discipline_reports = DisciplineReport.objects.filter(
        student=student,
        is_deleted=False
    ).order_by('-date')
    
    context = {
        'parent_profile': parent_profile,
        'student': student,
        'discipline_reports': discipline_reports,
    }
    
    return render(request, 'parent_portal_detail.html', context)



    from django.shortcuts import render, get_object_or_404, redirect
    from django.contrib.auth.decorators import login_required
    from django.contrib import messages
    from .models import ParentProfile, Student, DisciplineReport
    
    @login_required
    def parent_portal_detail(request):
        """
        View for parent portal showing student details and discipline reports.
        Accessible by users with a parent profile and superusers who can filter between parents.
        """
        # For superusers: allow filtering by parent_id if provided
        if request.user.is_superuser:
            parent_id = request.GET.get('parent_id')
            
            # Get all parent profiles for dropdown filter
            all_parents = ParentProfile.objects.all().order_by('student__name')
            
            if parent_id:
                # If specific parent requested, get that parent's profile
                parent_profile = get_object_or_404(ParentProfile, user_id=parent_id)
            elif all_parents.exists():
                # Default to first parent if none specified
                parent_profile = all_parents.first()
            else:
                messages.warning(request, "No parent profiles exist in the system.")
                return redirect('dashboard')
                
            student = parent_profile.student
            
        else:
            # Regular parent user - check if they have a parent profile
            try:
                parent_profile = request.user.parent_profile
                student = parent_profile.student
                all_parents = None  # Regular parents don't need the list of all parents
            except ParentProfile.DoesNotExist:
                messages.error(request, "You don't have access to the parent portal.")
                return redirect('dashboard')
        
        # Get all discipline reports for this student, ordered by date (newest first)
        discipline_reports = DisciplineReport.objects.filter(
            student=student,
            is_deleted=False
        ).order_by('-date')
        
        context = {
            'parent_profile': parent_profile,
            'student': student,
            'discipline_reports': discipline_reports,
            'all_parents': all_parents,  # Will be None for regular parent users
            'is_superuser': request.user.is_superuser
        }
        
        return render(request, 'parent/parent_portal.html', context)

